function gen_obcs_hycom(bnd, thickness, corner_island_flag, grid_dir, mask_dir, interpolated_hycom_data_dir, output_dir, target_date)
%% `bnd`            : Side of the boundary. Accepting 'north', 'south', 'west', 'east'.
%% `corner_island_flag` : If adding corner island or not. 0 = do not add. 1 = add
%% `thickness`    : The thickness of the oundary layer in terms of the number of model grids
%% `grid_dir`       : should contain the file grid.mat
%% `mask_dir`       : should contain mask files generated by mitgcm
%% `interpolated_hycom_data_dir` : should contain the initial condition bin files
%% `output_dir`     : the output directory
%%                    boundary condition files is a sequence of binary data)
%% `target_date`    : should be a formatted string `yyyy-mm-dd_hh`

    run('pathdef.m');
    FMT_json = read_json('../FMT.json');
    fmt = FMT_json.fmt;
    Ieee = FMT_json.Ieee;
    
    grid_file = sprintf('%s/grid.mat', grid_dir);
    fprintf('Loading grid file: %s\n', grid_file);
    gd = load(grid_file);

    nxc = length(gd.xc);
    nyc = length(gd.yc);
    nzc = length(gd.zc);
    


    % HYCOM outputs
    %ic_file = sprintf('%s/hycom_%s.mat', hycom_data_dir, target_date);
    %fprintf('Loading initial condition data file: %s\n', ic_file);
    %D = load(ic_file);
    %D = D.D;

    %hycom_lon = D.Longitude;
    %hycom_lat = D.Latitude;
    %hycom_z = D.Depth;
    %hycom_time = D.Date;
    %hycomu = D.water_u;
    %hycomv = D.water_v;
    %hycomt = D.water_temp;
    %hycoms = D.salinity;

   
    if strcmp(bnd, 'north') == 1
        idx_lon = 1:nxc;
        idx_lat = (nyc-thickness+1):(nyc-thickness+1);
        OB = ones(nxc, 1) * thickness;

    elseif strcmp(bnd, 'south') == 1
        idx_lon = 1:nxc;
        idx_lat = thickness:thickness+1; % +1 is because of the specification of open boundary. See mitgcm doc.
        OB = ones(nxc, 1) * thickness;

    elseif strcmp(bnd, 'west') == 1
        idx_lon = thickness:thickness+1;
        idx_lat = 1:nyc;
        OB = ones(nyc, 1) * thickness;

    elseif strcmp(bnd, 'east') == 1
        idx_lon = (nxc-thickness+1):(nxc-thickness+1);
        idx_lat = 1:nyc;
        OB = ones(nyc, 1) * thickness;
    else
        error('Unknown boundary name: %s', bnd);
    end


    if corner_island_flag == 1
        OB(1) = 0;
        OB(end) = 0;
    end

    % Extract HYCOM fields at this time
    varnames = {'T', 'S', 'U', 'V'};
    % vars = {hycomt, hycoms, hycomu, hycomv};
    % maskchk = [];    
    % interpolated_vars = {};
 
    for i = 1:length(varnames)
        varname = varnames{i};
        % var = vars{i};

        fprintf('Processing variable: %s\n', varname);

        % Some details about boundaries
        bnd_xc = gd.xc(idx_lon);
        bnd_yc = gd.yc(idx_lat);
        bnd_xf = gd.xf(idx_lon);
        bnd_yf = gd.yf(idx_lat);
        bnd_zc = gd.zc;
    
        data_file = sprintf('%s/hycom_%s_%s.bin', interpolated_hycom_data_dir, varname, target_date);
        fprintf('Loading file: %s\n', data_file);

        if exist(data_file) ~= 2
            fprintf('Cannot find file. Skip it.\n');
            continue;
        end

        interpolated_var = rdslice(data_file, [nxc nyc nzc], 1, fmt, Ieee);

        interpolated_var = interpolated_var(idx_lon, idx_lat, :);

        %[interpolated_var, ~, ~, ~] = hycom2modelgrid(varname, var, hycom_lon, hycom_lat, hycom_z, bnd_xc, bnd_yc, bnd_xf, bnd_yf, bnd_zc, mask_dir, idx_lon, idx_lat);

        %output_bin_file = sprintf('%s/hycom_%s_%s_%s.bin', output_dir, varname, bnd, target_date);
        %fprintf('Writing variable %s to file %s\n', varname, output_bin_file);
        %wrslice(output_bin_file, interpolated_var, 1, fmt, Ieee);
   
        OB_idx = find(OB~=0);

        % Assign row by row or column by colmn
        % This part is tedious because the location
        % specification is complicated
        % Please refer to:
        %   https://mitgcm.readthedocs.io/en/latest/phys_pkgs/obcs.html

        clear OB_data;
        if strcmp(bnd, 'north') == 1
            OB_data = zeros(nxc, nzc);
            for i = OB_idx
                OB_data(i, :) = interpolated_var(i, 1, :);
            end

        elseif strcmp(bnd, 'south') == 1
            OB_data = zeros(nxc, nzc);
            for i = OB_idx
                if strcmp(varname, 'V') ~= 1  % Other than V
                    OB_data(i, :) = interpolated_var(i, 1, :);
                else
                    OB_data(i, :) = interpolated_var(i, 2, :);
                end 
            end

        elseif strcmp(bnd, 'east') == 1

            OB_data = zeros(nyc, nzc);
            for j = OB_idx
                OB_data(j, :) = interpolated_var(1, j, :);
            end

        elseif strcmp(bnd, 'west') == 1
            OB_data = zeros(nyc, nzc);
            for j = OB_idx
                if strcmp(varname, 'U') ~= 1 % Other than U
                    OB_data(j, :) = interpolated_var(1, j, :);
                else
                    OB_data(j, :) = interpolated_var(2, j, :);
                end 
            end
        end

    
        output_file = sprintf('%s/obcs_%s_%s_%s.bin', output_dir, varname, bnd, target_date);
        fprintf('Output file: %s\n', output_file);
        fprintf('Size of the array: ', prod(size(OB_data)));
        wrslice(output_file, OB_data, 1, fmt, Ieee);

    end

end
